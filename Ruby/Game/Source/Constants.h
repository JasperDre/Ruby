#pragma once

#include "GamePCH.h"
#include "Game/Game.h"

//Area names used to call the conrtuctors of initial areas through the Scene Manager as well as switching the active scene & loading/unloading inactive scenes
enum Areas
{
	Area_PalletTown = 0,
	Area_TrainerHouse,
	Area_RivalHouse,
	Area_OakLab,
	Area_Woods,
	Area_Null,
};

//Names of Textures used to call texture charactistics from ResourceManager
enum TextureHandle
{
	TileSet = 0,
	OakLabTileSet,
	Player_NPCSprites,
	ForestTileSet,
	BattleScene,
	Extras
};

//Base Tile Types per Area, mask is base 0 - 15
enum Tile_Type
{
	Trainer_House_ = 0,	 //(0000 0000 0000 0000) 
	Oak_House_ = 1,		 //(0000 0000 0000 0001)
	Town_Sign_ = 2,		 //(0000 0000 0000 0010)
	Town_MailBox_ = 3,	 //(0000 0000 0000 0011)
	Town_Fence_ = 4,	 //(0000 0000 0000 0100)
	Town_Grass_A_ = 5,	 //(0000 0000 0000 0101)
	Town_Flower_ = 6,	 //(0000 0000 0000 0110)
	Town_Grass_B_ = 7,	 //(0000 0000 0000 0111)
	Wild_Grass_ = 8,	 //(0000 0000 0000 1000)
	Water_A_ = 9,		 //(0000 0000 0000 1001)
	Town_Tree_ = 10,	 //(0000 0000 0000 1010)
	Oak_Door_ = 11,		 //(0000 0000 0000 1011)
	Player_Door_ = 12,	 //(0000 0000 0000 1100)
	Town_Null_Door_ = 13,//(0000 0000 0000 1101)
	Town_Null_Wall_ = 14 //(0000 0000 0000 1110)
};

enum OakLab_Tile_Type
{
	Oak_Lab_Floor_ = 0,		//(0000 0000 0000 0000)
	Oak_Lab_Entrance_ = 1,	//(0000 0000 0000 0001)
	Oak_Lab_BookShelf_ = 2,	//(0000 0000 0000 0010)
	Oak_Lab_Machine_ = 3,	//(0000 0000 0000 0011)
	Oak_Lab_Plant_ = 4,		//(0000 0000 0000 0100)
	Oak_Lab_Seat_ = 5,		//(0000 0000 0000 0101)
	Oak_Lab_Table_ = 6,		//(0000 0000 0000 0110)
	Oak_Lab_Wall_ = 7,		//(0000 0000 0000 0111)
	Oak_Lab_WorkDesk_ = 8,	//(0000 0000 0000 1000)
	Oak_Lab_NullWall_ = 9,	//(0000 0000 0000 1001)
	Oak_Lab_NullDoor_ = 10	//(0000 0000 0000 1010)
};

enum Forest_Tile_Type
{
	Forest_Grass_ = 0,
	Forest_Ridge_ = 1,
	Forest_Tree_ = 2,
	Forest_Wild_Grass_ = 3,
	Forest_Sign_ = 4,
	Forest_Fence_ = 5,
	Forest_Null_Wall = 6,
	Forest_Null_Door = 7
};

//Enum for max number of Tile Variants, the mask for Variants is base 16 - 32,767 - Note: Variant 0 is used when NULL tiles or NULL doors are required for the Area 
enum Tile_Variants
{
	TileVariant_0 = 0,		//(0000 0000 0000 0000)
	TileVariant_1 = 16,		//(0000 0000 0001 0000)
	TileVariant_2 = 32,		//(0000 0000 0010 0000)
	TileVariant_3 = 48,		//(0000 0000 0011 0000)
	TileVariant_4 = 64,		//(0000 0000 0100 0000)
	TileVariant_5 = 80,		//(0000 0000 0101 0000)
	TileVariant_6 = 96,		//(0000 0000 0110 0000)
	TileVariant_7 = 112,	//(0000 0000 0111 0000)
	TileVariant_8 = 128,	//(0000 0000 1000 0000)
	TileVariant_9 = 144,	//(0000 0000 1001 0000)
	TileVariant_10 = 160,	//(0000 0000 1010 0000)
	TileVariant_11 = 176,	//(0000 0000 1011 0000)
	TileVariant_12 = 192,	//(0000 0000 1100 0000)
	TileVarient_13 = 208,	//(0000 0000 1101 0000)
	TileVariant_14 = 224,	//(0000 0000 1111 0000)
	TileVariant_15 = 240,	//(0000 0001 0000 0000)
	TileVariant_16 = 256,	//(0000 0001 0001 0000)
	TileVariant_17 = 272,	//(0000 0001 0010 0000)
	TileVariant_18 = 288,	//(0000 0001 0011 0000)
	TileVariant_19 = 304,	//(0000 0001 0100 0000)
	TileVariant_20 = 320,	//(0000 0001 0101 0000)
	TileVariant_21 = 336,	//(0000 0001 0110 0000)
	TileVariant_22 = 352,	//(0000 0001 0111 0000)
	TileVariant_23 = 368,	//(0000 0001 1000 0000)
	TileVariant_24 = 384,	//(0000 0001 1001 0000)
	TileVariant_25 = 400,	//(0000 0001 1010 0000)
	TileVariant_26 = 416,	//(0000 0001 1011 0000)
	TileVariant_27 = 432,	//(0000 0001 1100 0000)
	TileVariant_28 = 448,	//(0000 0001 1101 0000)
	TileVariant_29 = 464,	//(0000 0001 0110 0000)
	TileVariant_30 = 480,	//(0000 0001 1111 0000)
	TileVariant_31 = 496,	//(0000 0010 0000 0000)
	TileVariant_32 = 512,	//(0000 0010 0001 0000)
	TileVariant_33 = 528,	//(0000 0010 0010 0000)
	TileVariant_34 = 544,	//(0000 0010 0011 0000)	
	TileVariant_35 = 560,	//(0000 0010 0100 0000)
};

//Definition for single frame off a given spritesheet
struct Frame
{
	Frame()
		: myOrigin(0.0f)
		, mySize(0.0f)
		, myWorldSpace(0.0f)
		, myUVScale(0.0f)
		, myUVOffset(0.0f)
	{}

	Frame(vec2 anOrigin, vec2 aSize)
		: myOrigin(anOrigin)
		, mySize(aSize)
		, myWorldSpace(0.0f)
		, myUVScale(0.0f)
		, myUVOffset(0.0f)
	{}

	vec2 myOrigin;
	vec2 mySize;
	vec2 myWorldSpace;
	vec2 myUVScale;
	vec2 myUVOffset;
};

//TileInfo definition
struct TileInfo
{
	TileInfo(Tile_Type aType)
		: MyLabType(OakLab_Tile_Type::Oak_Lab_BookShelf_)
		, MyForestType(Forest_Tile_Type::Forest_Fence_)
		, MyType(aType)
		, MyIndex(0)
		, IsDoor(false)
		, IsWalkable(true)
	{}

	TileInfo(OakLab_Tile_Type aType)
		: MyLabType(aType)
		, MyForestType(Forest_Tile_Type::Forest_Fence_)
		, MyType(Tile_Type::Oak_Door_)
		, MyIndex(0)
		, IsDoor(false)
		, IsWalkable(true)
	{}

	TileInfo(Forest_Tile_Type aType)
		: MyLabType(OakLab_Tile_Type::Oak_Lab_BookShelf_)
		, MyForestType(aType)
		, MyType(Tile_Type::Oak_Door_)
		, MyIndex(0)
		, IsDoor(false)
		, IsWalkable(true)
	{}

	TileInfo()
		: MyLabType(OakLab_Tile_Type::Oak_Lab_BookShelf_)
		, MyForestType(Forest_Tile_Type::Forest_Fence_)
		, MyType(Tile_Type::Oak_Door_)
		, MyIndex(0)
		, IsDoor(false)
		, IsWalkable(true)
	{}

	std::vector<Frame> MyVariant;
	OakLab_Tile_Type MyLabType;
	Forest_Tile_Type MyForestType;
	Tile_Type MyType;
	int MyIndex;
	bool IsDoor;
	bool IsWalkable;
};

//Player and NPC direction Enum and matching direction vectors
enum class SpriteDirection
{
	SpriteWalkDown,
	SpriteWalkRight,
	SpriteWalkLeft,
	SpriteWalkUp,
	SpriteDirectionStop
};

const vec2 DIRECTIONVECTOR[] = { vec2(0.0f, -1.0f), vec2(1.0f, 0.0f), vec2(-1.0f, 0.0f), vec2(0.0f, 1.0f) };

//Global AI State function declaration
typedef bool (GameObject::*GetForNodeIsClearOnSpecial)(int tx, int ty);
typedef int (GameObject::*GetRangeRandomIntAlg)(int min, int max);
typedef void(*AIStateUpdate)(GameObject* aGameObject, float deltatime);

//Const Enum of NPC States
enum class AI_States
{
	IdleState,
	WalkingState,
	PathingState,
	TrackToPlayerState
};

//Global const variables such as map sizes, tile size, player/NPC speed are defined here for ease of access if changes are required 
constexpr float PLAYER_SPEED = 4.4f;
constexpr float NPC_SPEED = 3.6f;
constexpr float TILESIZE = 2.0f;
constexpr unsigned int WORLDWIDTH = 50;
constexpr unsigned int WORLDHEIGHT = 50;
constexpr unsigned int NUM_DIRECTIONS = 4;
constexpr int NUM_TILETYPES = 13;
constexpr int NUM_TILEVARIANTS = 34;
constexpr int NUM_ROWS = 33;
constexpr int NUM_COLUMNS = 32;
constexpr int MAPSIZE = 1056;
constexpr int NUM_LAB_ROWS = 15;
constexpr int NUM_LAB_COLUMNS = 16;
constexpr int LABSIZE = 240;
constexpr int OAKMAXPATHSIZE = 20;
constexpr int MAXPATHSIZE_TOWN_NPC = 50;
constexpr int FORESTMAPSIZE = 2112;
constexpr int NUM_FOREST_ROWS = 44;
constexpr int NUM_FOREST_COLUMNS = 48;
const vec2 PLAYER_START = vec2(9.0f * TILESIZE, 20.0f * TILESIZE);

//Definition of short BitMaps for each Area are defined here
const unsigned short PalletTownBitMap[MAPSIZE] =
{
	58,  74,  58,  74,  58,  74,  58,  74,  23,  84,  73,  89,  89,  105,  39,  39,  39,  39,  39,  39,  39,  39,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,
	122, 138, 122, 138, 122, 138, 122, 138, 39,  84,  73,  89,  89,  105,  39,  39,  39,  39,  39,  39,  39,  23,  122, 138, 122, 138, 122, 138, 122, 138, 122, 138,
	58,  74,  58,  74,  58,  74,  58,  74,  39,  84,  73,  89,  89,  105,  39,  39,  39,  39,  39,  39,  39,  23,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,
	122, 138, 122, 138, 122, 138, 122, 138, 23,  84,  73,  89,  89,  105,  39,  39,  39,  39,  39,  39,  39,  39,  122, 138, 122, 138, 122, 138, 122, 138, 122, 138,
	58,  74,  58,  74,  58,  74,  58,  74,  23,  84,  73,  89,  89,  105,  39,  39,  39,  39,  39,  39,  39,  39,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,
	122, 138, 122, 138, 122, 138, 122, 138, 20,  36,  73,  89,  89,  105,  20,  20,  20,  20,  20,  20,  20,  20,  122, 138, 122, 138, 122, 138, 122, 138, 122, 138,
	58,  74,  58,  74,  58,  74,  58,  74,  39,  39,  73,  89,  89,  105,  39,  39,  39,  39,  39,  39,  39,  39,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,
	122, 138, 122, 138, 154, 170, 154, 170, 39,  39,  73,  89,  89,  105,  39,  39,  39,  39,  39,  39,  39,  23,  154, 170, 154, 170, 154, 170, 122, 138, 122, 138,
	58,  74,  58,  74,  39,  39,  39,  23,  39,  39,  73,  89,  89,  105,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  117, 58,  74,  58,  74,
	122, 138, 122, 138, 39,  39,  39,  39,  23,  39,  73,  89,  89,  105,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  53,  122, 138, 122, 138,
	58,  74,  58,  74,  101, 85,  85,  85,  85,  85,  25,  41,  41,  57,   21,  21,  21,  197, 69,  69,  69,  69,  69,  69,  69,  213, 21,  53,  58,  74,  58,  74,
	122, 138, 122, 138, 37,  21,  21,  21,  21,  21,  21,  21,  21,  21,   21,  21,  21,  53,  23,  39,  39,  23,  39,  39,  39,  37,  21,  53,  122, 138, 122, 138,
	58,  74,  58,  74,  37,  21,  197, 69,  69,  69,  69,  69,  69,  69,   69,  213, 21,  165 ,85,  85,  85,  85,  85,  85,  85,  181, 21,  53,  58,  74,  58,  74,
	122, 138, 122, 138, 37,  21,  53,  39,  22,  22,  22,  22,  22,  22,   39,  37, 197,  69,  69,  213, 197, 69,  69,  69,  69,  213, 21,  53,  122, 138, 122, 138,
	58,  74,  58,  74,  37,  21,  53,  39,  22,  22,  22,  22,  22,  22,   39,  37,  53,  465, 481, 497, 27,  513, 529, 545, 23,  37,  21,  53,  58,  74,  58,  74,
	122, 138, 122, 138, 37,  21,  53,  23,  22,  22,  22,  22,  22,  22,   23,  37,  53,  353, 369, 385, 401, 417, 433, 449, 23,  37,  21,  53,  122, 138, 122, 138,
	58,  74,  58,  74,  37,  21,  165, 85,  20,  20,  20,  20,  20,  20,   85,  181, 53,  241, 257, 273, 289, 305, 321, 337, 39,  37,  21,  53,  58,  74,  58,  74,
	122, 138, 122, 138, 37,  21,  21,  21,  21,  21,  21,  21,  21,  21,   21,  21,  165, 129, 145, 161, 177, 193, 209, 225, 85,  181, 21,  53,  122, 138, 122, 138,
	58,  74,  58,  74,  37,  21,  21,  21,  21,  21,  21,  21,  21,  21,   21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  53,  58,  74,  58,  74,
	122, 138, 122, 138, 37,  197, 69,  69,  69,  213, 197, 69,  69,  69,   213, 197, 69,  69,  69,  213, 197, 69,  69,  69,  69,  213, 21,  53,  122, 138, 122, 138,
	58,  74,  58,  74,  37,  53,  23,  39,  336, 28,  352, 368, 384, 23,   37,  53,  23,  39,  336,  28, 352, 368, 384, 39,  39,  37,  21,  53,  58,  74,  58,  74,
	122, 138, 122, 138, 37,  53,  23,  39,  256, 272, 288, 304, 320, 39,   37,  53,  23,  39,  256, 272, 288, 304, 320, 39,  23,  37,  21,  53,  122, 138, 122, 138,
	58,  74,  58,  74,  37,  53,  23,  39,  176, 192, 208, 224, 240, 23,   37,  53,  23,  39,  176, 192, 208, 224, 240, 39,  23,  37,  21,  53,  58,  74,  58,  74,
	122, 138, 122, 138, 37,  53,  23,  39,  96,  112, 128, 144, 160, 23,   37,  53,  23,  39,  96,  112, 128, 144, 160, 39,  39,  37,  21,  53,  122, 138, 122, 138,
	58,  74,  58,  74,  37,  165, 85,  85,  85,  85,  85,  85,  85,  85,   181, 165, 85,  85,  85,  85,  85,  85,  85,  85,  85,  181, 21,  53,  58,  74,  58,  74,
	122, 138, 122, 138, 37,  21,  21,  21,  21,  21,  21,  21,  21,  21,   21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  53,  122, 138, 122, 138,
	58,  74,  58,  74,  133, 69,  69,  69,  69,  69,  69,  69,  69,  69,   69,  69,  213, 197, 69,  69,  69,  69,  69,  69,  69,  69,  69,  149, 58,  74,  58,  74,
	122, 138, 122, 138, 26,  42,  26,  42,  26,  42,  26,  42,  26,  42,   26,  42,  37,  53,  26,  42,  26,  42,  26,  42,  26,  42,  26,  42,  122, 138, 122, 138,
	58,  74,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,   58,  74,  133, 149, 58,  74,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,
	122, 138, 122, 138, 122, 138, 122, 138, 122, 138, 122, 138, 122, 138,  122, 138, 39,  39,  122, 138, 122, 138, 122, 138, 122, 138, 122, 138, 122, 138, 122, 138,
	58,  74,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,   58,  74,  24,  24,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,  58,  74,
	154, 170, 154, 170, 154, 170, 154, 170, 154, 170, 154, 170, 154, 170,  154, 170, 24,  24,  154, 170, 154, 170, 154, 170, 154, 170, 154, 170, 154, 170, 154, 170,
	14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,   14,  14,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14
};

const unsigned short OakLabBitMap[LABSIZE] =
{	9, 9,   9,   9,   9,   9,   9,   10,  10,  9,   9,   9,   9,   9,   9,   9,
	9, 20,  64,  48,  64,  48,  64,  17,  33,  48,  64,  48,  64,  48,  36,  9,
	9, 352, 176, 128, 176, 128, 176, 49,  65,  128, 176, 128, 176, 128, 176, 9,
	9, 336, 320, 320, 320, 320, 128, 112, 128, 112, 320, 320, 320, 320, 320, 9,
	9, 82,  66,  50,  34,  18,  128, 176, 128, 176, 178, 194, 210, 226, 242, 9,
	9, 162, 146, 130, 114, 98,  96,  80,  96,  80,  258, 274, 290, 306, 322, 9,
	9, 352, 128, 112, 128, 112, 128, 112, 128, 112, 128, 112, 128, 112, 128, 9,
	9, 144, 176, 128, 176, 128, 176, 128, 176, 128, 176, 128, 176, 128, 176, 9,
	9, 144, 80,  19,  35,  96,  80,  96,  80,  96,  22,  38,  54,  96,  80,  9,
	9, 21,  128, 51,  67,  112, 128, 112, 128, 112, 128, 112, 128, 112, 128, 9,
	9, 21,  176, 128, 176, 128, 176, 128, 176, 128, 176, 128, 176, 128, 176, 9,
	9, 336, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 9,
	9, 104, 88,  72,  56,  40,  24,  16,  32,  16,  32,  338, 354, 370, 386, 9,
	9, 23,  23,  23,  23,  23,  23,  55,  71,  87,  103, 402, 418, 434, 450, 9,
	9, 39,  39,  39,  39,  39,  39,  119, 135, 151, 167, 39,  39,  39,  39,  9
};

const unsigned short ForestBitMap[FORESTMAPSIZE] =
{
	6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
	34,	18,	34, 18, 34, 18,	34, 18, 34, 18, 34,	18, 34,	18, 34, 18, 34, 18, 34, 18, 34, 18, 34, 18, 34, 18, 34, 18, 34, 18, 34, 18, 34, 18, 34, 18, 16, 16, 34, 18, 34, 18, 34, 18, 34, 18, 34, 18,
	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	16, 16,	50, 66,	50, 66,	50, 66,	50,	66,	50, 66,
	82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 16, 16, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98,
	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	16, 16,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,
	82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 16,	16, 16,	16, 16,	16, 82,	98, 82,	98, 82,	98, 82,	98,
	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66, 21,	21, 32,	32, 21,	21,	50, 66,	50, 66,	50, 66,	50, 66,
	82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 16,	16, 16,	16, 19,	19, 19,	19, 82,	98, 82,	98, 82,	98,
	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	16, 16,	19, 19,	19, 19,	19, 19,	50, 66,	50, 66,	50, 66,
	82,	98, 82,	98, 82,	98, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 19, 19, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 19, 16, 19, 19, 82,	98, 82,	98, 82,	98,
	50, 66,	50, 66,	50, 66, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 19, 19, 19, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 19, 19, 19,	50, 66,	50, 66,	50, 66,
	82,	98, 82,	98, 16, 16, 16, 19, 19, 19, 19, 19, 19, 16, 16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 19, 34, 18, 34, 18, 34, 18, 16, 16, 16, 16, 34, 18, 34, 18, 34, 18, 82,	98, 82,	98, 82,	98,
	50, 66,	50, 66, 16, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 50, 66,	50, 66,	50, 66, 17, 33, 33, 49, 50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,
	82,	98, 82,	98, 19, 19, 19, 19, 19, 19, 34, 18, 34, 18, 34, 18, 16, 16, 16, 16, 16, 16, 34, 18, 34, 18, 82,	98, 82,	98, 82,	98, 16, 16, 16, 16, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98,
	50, 66,	50, 66, 19, 19, 19, 19, 19, 19,	50, 66,	50, 66,	50, 66, 17, 33, 33, 33, 33, 49, 50, 66,	50, 66,	50, 66,	50, 66,	50, 66, 16, 16, 16, 19, 50, 66,	50, 66,	50, 66,	50, 66,	50, 66,	50, 66,
	82,	98, 82,	98, 19, 19, 19, 19, 19, 19, 82,	98, 82,	98, 82,	98, 16, 16, 16, 16, 16, 16, 82,	98, 82,	98, 82,	98, 82,	98, 82,	98, 16, 19, 19, 19, 82,	98, 82,	98, 16, 19, 19, 19, 82,	98, 82,	98,
	50, 66, 50, 66, 19, 19, 19, 19, 19, 19, 50, 66, 50, 66, 50, 66, 16, 16, 16, 16, 16, 16, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 19, 19, 19, 19, 50, 66, 50, 66, 19, 19, 19, 19, 50, 66, 50, 66,
	82,	98, 82, 98, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 82,	98, 82,	98, 19, 19, 19, 19, 82,	98, 16, 19, 19, 19, 19, 19, 19, 19, 82, 98,
	50, 66, 50, 66, 16, 19, 19, 19, 19, 19, 19, 19, 19, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 50, 66, 50, 66, 19, 19, 19, 19, 50, 66, 16, 19, 19, 19, 19, 19, 19, 19, 50, 66,
	82, 98, 82, 98, 34, 18, 19, 19, 19, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 19, 19, 16, 16, 16, 82, 98, 82, 98, 19, 19, 19, 16, 16, 16, 16, 19, 19, 19, 19, 19, 19, 19, 82, 98,
	50, 66, 50, 66, 50, 66, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 19, 19, 19, 19, 16, 16, 50, 66, 50, 66, 19, 19, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 19, 16, 50, 66,
	82, 98, 82, 98, 82, 98, 34, 18, 34, 18, 34, 18, 16, 16, 16, 16, 34, 18, 34, 18, 34, 18, 34, 18, 34, 18, 16, 16, 82, 98, 82, 98, 19, 16, 16, 16, 16, 16, 34, 18, 34, 18, 19, 19, 19, 16, 82, 98,
	50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 17, 33, 33, 49, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 16, 16, 50, 66, 50, 66, 19, 16, 16, 16, 16, 16, 50, 66, 50, 66, 19, 19, 16, 16, 50, 66,
	82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 16, 16, 16, 16, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 16, 16, 82, 98, 82, 98, 34, 18, 16, 16, 34, 18, 82,	98, 82,	98, 19, 16, 16, 16, 82,	98,
	50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 16, 16, 16, 16, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 16, 16, 50, 66, 50, 66, 50, 66, 16, 16, 50, 66, 50, 66, 50, 66, 17, 33, 33, 49, 50, 66,
	82, 98, 82, 98, 19, 19, 19, 19, 19, 19, 19, 16, 16, 16, 16, 16, 19, 19, 19, 19, 19, 19, 19, 19, 19, 16, 16, 16, 82, 98, 82, 98, 82, 98, 34, 18, 82, 98, 82, 98, 82, 98, 16, 16, 16, 16, 82, 98,
	50, 66, 50, 66, 19, 19, 19, 19, 19, 19, 19, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 16, 16, 16, 16, 16, 16, 16, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 16, 16, 16, 19, 50, 66,
	82, 98, 82, 98, 16, 19, 19, 19, 34, 18, 34, 18, 34, 18, 16, 16, 16, 16, 16, 16, 34, 18, 34, 18, 34, 18, 34, 18, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 16, 16, 19, 19, 82, 98,
	50, 66, 50, 66, 16, 16, 16, 19, 50, 66, 50, 66, 50, 66, 16, 16, 16, 16, 16, 16, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 16, 19, 19, 19, 50, 66,
	82, 98, 82, 98, 16, 16, 16, 16, 82, 98, 82, 98, 82, 98, 17, 33, 33, 33, 33, 49, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 16, 19, 19, 19, 82, 98,
	50, 66, 50, 66, 16, 19, 19, 19, 50, 66, 50, 66, 50, 66, 16, 16, 16, 16, 16, 16, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 16, 19, 19, 19, 50, 66,
	82, 98, 82, 98, 19, 19, 19, 19, 19, 19, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 19, 19, 82, 98, 82, 98, 82, 98, 19, 19, 19, 16, 16, 16, 16, 16, 19, 19, 82, 98,
	50, 66, 50, 66, 19, 19, 19, 19, 19, 19, 19, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 19, 19, 19, 50, 66, 50, 66, 50, 66, 19, 19, 19, 16, 16, 16, 16, 16, 16, 19, 50, 66,
	82, 98, 82, 98, 16, 19, 19, 19, 19, 19, 19, 16, 16, 16, 16, 16, 16, 16, 16, 16, 34, 18, 34, 18, 34, 18, 19, 19, 19, 16, 16, 16, 16, 19, 19, 19, 19, 16, 34, 18, 34, 18, 16, 16, 16, 16, 82, 98,
	50, 66, 50, 66, 16, 16, 16, 19, 19, 19, 19, 20, 16, 16, 16, 16, 16, 16, 16, 16, 50, 66, 50, 66, 50, 66, 19, 19, 16, 16, 16, 16, 16, 16, 19, 19, 16, 16, 50, 66, 50, 66, 17, 33, 33, 49, 50, 66,
	82, 98, 82, 98, 34, 18, 34, 18, 34, 18, 34, 18, 16, 16, 16, 16, 16, 16, 16, 16, 82, 98, 82, 98, 82, 98, 34, 18, 16, 16, 34, 18, 34, 18, 16, 16, 16, 16, 82, 98, 82, 98, 19, 19, 16, 16, 82, 98,
	50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 16, 16, 16, 16, 16, 16, 16, 16, 50, 66, 50, 66, 50, 66, 50, 66, 16, 16, 50, 66, 50, 66, 16, 16, 16, 16, 50, 66, 50, 66, 19, 19, 19, 16, 50, 66,
	82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 21, 21, 21, 21, 21, 21, 21, 21, 82, 98, 82, 98, 82, 98, 82, 98, 34, 18, 82, 98, 82, 98, 16, 16, 16, 16, 19, 19, 19, 19, 19, 19, 34, 18, 82, 98,
	50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 34, 18, 16, 16, 16, 16, 34, 18, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 16, 16, 16, 16, 16, 19, 19, 19, 19, 19, 50, 66, 50, 66,
	82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 50, 66, 16, 16, 16, 16, 50, 66, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 34, 18, 34, 18, 34, 18, 34, 18, 34, 18, 82, 98, 82, 98,
	50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 82, 98, 16, 16, 16, 16, 82, 98, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66,
	82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 50, 66, 16, 16, 16, 16, 50, 66, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98,
	50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 82, 98, 16, 16, 16, 16, 82, 98, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66, 50, 66,
	82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 50, 66, 16, 16, 16, 16, 50, 66, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98, 82, 98
};